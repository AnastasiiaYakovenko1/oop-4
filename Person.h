#pragma once
#include <string>
#include <iostream>
using namespace std;
class Person
{
protected:
    string name, surname;
    Person();
    Person(string name, string surname); //Конструктор, з його допомогою ми передаємо значення об'єкта
    Person(const Person& other); //Deep copy конструктор, з його допомогою ми копіюємо значення одного об'єкта в інший
    /*
        * Різниця між Deep та Shalow Copy у тому що:
        *
        * Shalow просто копіює і якщо ми процюємо з динамічною пам'ятю то скопійований об'єкт ссилатиметься на туж область
        * пам'яті, при очищені ми матимемо помилку тому що основний об'єкт вже почистив її, і туда ж знову хоче її почистити
        * скопійований, але та область вже нам не належить і прога падає. А ще Shalow це по суті той конструктор копіювання що
        * створюється компілятором самостійно без прописання власноруч.
        *
        * Deep у свій час, це той що ми прописуємо власноруч, і він при копіюванні об'єкта з динамічною пам'ятю виділяє зовсім
        * іншу область, і тому у основного свій адрес пам'яті а у скопійованного свій.
    */

    Person(Person&& other);
    /*
        * Move конструктор.
        * З назви можна зрозуміти що це конструктор переміщення, і що він переносить значення з одного об'єкта у інший.
        * Саме тому створюючи конструктор ми спочатку копіюємо значення з одного об'єкта у інший, і потім зануляєм перший.
    */


    ~Person() {}; //Деструктор, руйнує(видаляє) об'єкт

    friend ostream& operator << (ostream& os, Person& obj); //Перевантажений дружній оператор виводу
    friend istream& operator >> (istream& is, Person& obj); //Перевантажений дружній оператор вводу
};

